package hospitaldpc.interfaces;

import hospitaldpc.managers.PatientsManager;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

public class ReadPatient_Main extends javax.swing.JFrame {

    private PatientsManager manager;

    public ReadPatient_Main() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        this.manager = new PatientsManager();
        this.fillTable();
        JPopupMenu popupDef = new JPopupMenu();
        popupDef.add(this.popup);
        this.patientTable.setComponentPopupMenu(popupDef);
    }//end constructor

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popup = new javax.swing.JPanel();
        edit = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        patientTable = new javax.swing.JTable();
        addButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        popup.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        edit.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        edit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GraphResources/EditButton.png"))); // NOI18N
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionPerformed(evt);
            }
        });
        popup.add(edit, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 250, 35));

        delete.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        delete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GraphResources/DeleteButton.png"))); // NOI18N
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });
        popup.add(delete, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 41, 250, 35));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        patientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Nombre", "Apellidos", "Sexo", "E. Marital", "F. Nacim.", "Direccion", "TelÃ©fono", "Email", "Altura", "Peso", "Temperatura", "Oximetria", "Descripcion", "id"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        patientTable.setInheritsPopupMenu(true);
        jScrollPane1.setViewportView(patientTable);
        if (patientTable.getColumnModel().getColumnCount() > 0) {
            patientTable.getColumnModel().getColumn(0).setResizable(false);
            patientTable.getColumnModel().getColumn(1).setResizable(false);
            patientTable.getColumnModel().getColumn(2).setResizable(false);
            patientTable.getColumnModel().getColumn(3).setResizable(false);
            patientTable.getColumnModel().getColumn(4).setResizable(false);
            patientTable.getColumnModel().getColumn(5).setResizable(false);
            patientTable.getColumnModel().getColumn(6).setResizable(false);
            patientTable.getColumnModel().getColumn(7).setResizable(false);
            patientTable.getColumnModel().getColumn(8).setResizable(false);
            patientTable.getColumnModel().getColumn(9).setResizable(false);
            patientTable.getColumnModel().getColumn(10).setResizable(false);
            patientTable.getColumnModel().getColumn(11).setResizable(false);
            patientTable.getColumnModel().getColumn(12).setResizable(false);
            patientTable.getColumnModel().getColumn(13).setResizable(false);
            patientTable.getColumnModel().getColumn(14).setMinWidth(0);
            patientTable.getColumnModel().getColumn(14).setPreferredWidth(0);
            patientTable.getColumnModel().getColumn(14).setMaxWidth(0);
        }

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 94, 1330, 410));

        addButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GraphResources/NewButton.png"))); // NOI18N
        addButton.setBorder(null);
        addButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        jPanel1.add(addButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 520, 280, 40));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GraphResources/ListSectionLogo.png"))); // NOI18N
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, 50));

        jLabel2.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 51, 51));
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GraphResources/Background.png"))); // NOI18N
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, 1380, 510));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        new CreatePatient(this, true).setVisible(true);
        this.cleanTable();
        this.fillTable();
    }//GEN-LAST:event_addButtonActionPerformed

    private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed
        if(this.patientTable.getSelectedRow() >= 0)
            this.edit(Integer.parseInt((String) this.patientTable.getValueAt(this.patientTable.getSelectedRow(), 14)));
        else
            JOptionPane.showMessageDialog(this, "Selecciona un registro de la tabla.", "Selecciona un registro", JOptionPane.WARNING_MESSAGE);
    }//GEN-LAST:event_editActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        if(this.patientTable.getSelectedRow() >= 0)
            this.delete(Integer.parseInt((String) this.patientTable.getValueAt(this.patientTable.getSelectedRow(), 14)));
        else
            JOptionPane.showMessageDialog(this, "Selecciona un registro de la tabla.", "Selecciona un registro", JOptionPane.WARNING_MESSAGE);
    }//GEN-LAST:event_deleteActionPerformed

    public void fillTable() {
        String[][] data;
        try {
            data = this.manager.readPatient();
            //OBTENEMOS LOS ELEMENTOS NECESARIOS DE LA TABLA.
            DefaultTableModel model = (DefaultTableModel) this.patientTable.getModel();
            DefaultTableCellRenderer alineacion = (DefaultTableCellRenderer) this.patientTable.getCellRenderer(1, 0);
            alineacion.setVerticalAlignment(javax.swing.SwingConstants.TOP);

            for (int i = 0; i < data.length; i++) {
               
                String[] fila = new String[15];
                fila[0] = ("" + (i + 1));
                fila[1] = data[i][1];
                fila[2] = data[i][2];
                fila[3] = data[i][3];
                fila[4] = data[i][4];
                fila[5] = data[i][5];
                fila[6] = data[i][6];
                fila[7] = data[i][7];
                fila[8] = data[i][8];
                fila[9] = data[i][9];
                fila[10] = data[i][10];
                fila[11] = data[i][11];
                fila[12] = data[i][12];
                fila[13] = data[i][13];
                fila[14] = data[i][0];

                model.addRow(fila); //CON BASE EN EL MODELO OBTENIDO AGREGAMOS LA FILA CON LOS DATOS CORRESPONDIENTES
            }//end for
        }//end try//end try
        catch (ClassNotFoundException | SQLException e) {
            JOptionPane.showMessageDialog(this, "Hubo un error al mostrar los pacientes.\nERROR: " + e.getMessage());
        }//end catch exception
    }//end fillTable

    public void cleanTable() {
        DefaultTableModel model = (DefaultTableModel) this.patientTable.getModel();
        DefaultTableCellRenderer alineacion = (DefaultTableCellRenderer) this.patientTable.getCellRenderer(1, 0);
        while (this.patientTable.getRowCount() > 0) {
            model.removeRow(model.getRowCount() - 1);
        }//end mientras siga habiendo filas
    }//end cleanTable

    public void edit(int idPatient ){
        UpdatePatient editor = new UpdatePatient(this, true, idPatient);
        editor.setVisible(true);
        this.cleanTable();
        this.fillTable();
    }//end edit

    public void delete(int idPatient) {
        try {
            if (this.manager.deletePatient(idPatient) > 0) {
                JOptionPane.showMessageDialog(this, "Se ha eliminado exitosamente el paciente.", "EliminaciÃ³n Exitosa", JOptionPane.INFORMATION_MESSAGE);
                this.cleanTable();
                this.fillTable();
            }//end if sÃ­ elimina
        }//end try //end try //end try //end try //end try //end try //end try //end try 
        catch (ClassNotFoundException | SQLException ex) {
            JOptionPane.showMessageDialog(this, "Hubo un error al eliminar el paciente.\nERROR: " + ex.getMessage());
        }//end catch exception
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton delete;
    private javax.swing.JButton edit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable patientTable;
    private javax.swing.JPanel popup;
    // End of variables declaration//GEN-END:variables
}
